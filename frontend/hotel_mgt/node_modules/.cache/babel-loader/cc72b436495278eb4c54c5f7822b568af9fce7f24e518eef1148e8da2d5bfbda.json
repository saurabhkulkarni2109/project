{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Group032\\\\Desktop\\\\project\\\\frontend\\\\hotel_mgt\\\\src\\\\component\\\\common\\\\RoomTypeSelector.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getRoomTypes } from '../utils/ApiFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomTypeSelector = ({\n  handleRoomInputChange,\n  newRoom\n}) => {\n  _s();\n  const [roomTypes, setRoomTypes] = useState([]);\n  const [showRoomTypeInput, setShowNewRoomTypesInput] = useState(false);\n  const [newRoomTypes, setNewRoomTypes] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const fetchRoomTypes = async () => {\n      try {\n        const data = await getRoomTypes();\n        setRoomTypes(data);\n      } catch (error) {\n        setError(\"Error fetching room types\");\n        console.error(error); // Log the error for debugging\n      }\n    };\n    fetchRoomTypes();\n  }, []);\n  const handleNewRoomTypeInputChange = e => {\n    setNewRoomTypes(e.target.value);\n  };\n  const handleAddNewRoomType = () => {\n    if (newRoomTypes !== \"\") {\n      setRoomTypes([...roomTypes, newRoomTypes]);\n      setNewRoomTypes(\"\");\n      setShowNewRoomTypesInput(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this), roomTypes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"roomType\",\n        name: \"roomType\",\n        value: newRoom.roomType,\n        onChange: e => {\n          if (e.target.value === \"Add New\") {\n            setShowNewRoomTypesInput(true);\n          } else {\n            handleRoomInputChange(e);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Room type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Add New\",\n          children: \"Add New\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), roomTypes.map((type, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: type,\n          children: type\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), showRoomTypeInput && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"text\",\n          placeholder: \"Enter a new Room Type\",\n          onChange: handleNewRoomTypeInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-hotel\",\n          type: \"button\",\n          onClick: handleAddNewRoomType,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(RoomTypeSelector, \"joF6+CqCUMeTZ/ESkSoq4PJjdl0=\");\n_c = RoomTypeSelector;\nexport default RoomTypeSelector;\nvar _c;\n$RefreshReg$(_c, \"RoomTypeSelector\");","map":{"version":3,"names":["React","useEffect","useState","getRoomTypes","jsxDEV","_jsxDEV","RoomTypeSelector","handleRoomInputChange","newRoom","_s","roomTypes","setRoomTypes","showRoomTypeInput","setShowNewRoomTypesInput","newRoomTypes","setNewRoomTypes","error","setError","fetchRoomTypes","data","console","handleNewRoomTypeInputChange","e","target","value","handleAddNewRoomType","children","fileName","_jsxFileName","lineNumber","columnNumber","length","id","name","roomType","onChange","map","type","index","className","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Group032/Desktop/project/frontend/hotel_mgt/src/component/common/RoomTypeSelector.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getRoomTypes } from '../utils/ApiFunctions';\r\n\r\nconst RoomTypeSelector = ({ handleRoomInputChange, newRoom }) => {\r\n  const [roomTypes, setRoomTypes] = useState([]);\r\n  const [showRoomTypeInput, setShowNewRoomTypesInput] = useState(false);\r\n  const [newRoomTypes, setNewRoomTypes] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchRoomTypes = async () => {\r\n      try {\r\n        const data = await getRoomTypes();\r\n        setRoomTypes(data);\r\n      } catch (error) {\r\n        setError(\"Error fetching room types\");\r\n        console.error(error); // Log the error for debugging\r\n      }\r\n    };\r\n\r\n    fetchRoomTypes();\r\n  }, []);\r\n\r\n  const handleNewRoomTypeInputChange = (e) => {\r\n    setNewRoomTypes(e.target.value);\r\n  };\r\n\r\n  const handleAddNewRoomType = () => {\r\n    if (newRoomTypes !== \"\") {\r\n      setRoomTypes([...roomTypes, newRoomTypes]);\r\n      setNewRoomTypes(\"\");\r\n      setShowNewRoomTypesInput(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {error && <p>{error}</p>}\r\n      {roomTypes.length > 0 && (\r\n        <div>\r\n          <select\r\n            id=\"roomType\"\r\n            name=\"roomType\"\r\n            value={newRoom.roomType}\r\n            onChange={(e) => {\r\n              if (e.target.value === \"Add New\") {\r\n                setShowNewRoomTypesInput(true);\r\n              } else {\r\n                handleRoomInputChange(e);\r\n              }\r\n            }}\r\n          >\r\n            <option value=\"\">Select a Room type</option>\r\n            <option value=\"Add New\">Add New</option>\r\n            {roomTypes.map((type, index) => (\r\n              <option key={index} value={type}>\r\n                {type}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {showRoomTypeInput && (\r\n            <div className=\"input-group\">\r\n              <input\r\n                className=\"form-control\"\r\n                type=\"text\"\r\n                placeholder=\"Enter a new Room Type\"\r\n                onChange={handleNewRoomTypeInputChange}\r\n              />\r\n              <button\r\n                className=\"btn btn-hotel\"\r\n                type=\"button\"\r\n                onClick={handleAddNewRoomType}\r\n              >\r\n                Add\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoomTypeSelector;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}